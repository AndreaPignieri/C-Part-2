When a class inherits publicly from another, the access rights for every member of the base class remain unchanged. This means, every public member of the base class is now a public member of the derived class and can be accessed by any outside code. Moreover designer of the derived class has access to the protected members of the base class. At last, private members of the base class remain non accessible both by outside code and internal code of the derived class.
In the case of protected inheritance, all the public and protected members of the base class become protected in the derived class. This means, all the inherited members inside of derived can now only be accessed by other classes which inherit from derived. Any other outside code which is not part of the inheritance tree is not able to access these members.
Finally, private inheritance turns all the inherited members from the base class into private ones in the designer class. This means that no code, neither external nor code of classes which inherit from Derived, can access any of the inherited members from the Base class.

First::fun is called by default because Koenig lookup ensures that when an argument is passed to a function, the compiler looks for the function in the namespace of the argument’s type. The fun(symbol) call in main matches the fun function in the First namespace because the argument symbol is of type First::Enum. Since symbol is of type First::Enum, the compiler finds and calls First::fun.
In order to call Second::fun instead, the explicit namespace qualification should be used: Second::fun(symbol); like this, Koenig lookup is bypassed by directly calling the fun function from the Second namespace.
Koenig lookup simplifies the use of operator<< because when using std::cout << obj;, the compiler looks for an operator<< in the namespace of both std (for std::cout) and the type of obj.
If obj is a custom type (e.g., a class or struct), and an appropriate operator<< is defined in the same namespace as the type of obj, Koenig lookup ensures that the correct operator<< is found automatically without explicitly qualifying it.
If a global fun function is defined, it does not interfere with the default Koenig lookup (unless explicitly qualified), and it can still be called using ::fun(symbol). So, if fun(symbol) matches a function in the namespace of the argument’s type, the global fun will be ignored, as Koenig lookup will resolve the call to that function. If no matching function exists, the global fun is considered.
 

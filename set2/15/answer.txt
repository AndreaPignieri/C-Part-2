When running the command:  valgrind -s --leak-check=full --show-leak-kinds=all ./main
We can see how there is a memory leak in this simple program. This is because exit calls abruptly terminate the process without clearing the stack. This implies that destructors are not called and open resources are not closed. Because of this behaviour, using exit calls instead of handling exceptions is dangerous which can lead to leaks and undefined behaviour.


==27439== Memcheck, a memory error detector
==27439== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==27439== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==27439== Command: ./main
==27439== 
==27439== 
==27439== HEAP SUMMARY:
==27439==     in use at exit: 32 bytes in 1 blocks
==27439==   total heap usage: 3 allocs, 2 frees, 77,856 bytes allocated
==27439== 
==27439== 32 bytes in 1 blocks are still reachable in loss record 1 of 1
==27439==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==27439==    by 0x40220C: main (in /root/programmin_in_c++/ex_wk2/15/main)
==27439== 
==27439== LEAK SUMMARY:
==27439==    definitely lost: 0 bytes in 0 blocks
==27439==    indirectly lost: 0 bytes in 0 blocks
==27439==      possibly lost: 0 bytes in 0 blocks
==27439==    still reachable: 32 bytes in 1 blocks
==27439==         suppressed: 0 bytes in 0 blocks
==27439== 
==27439== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
